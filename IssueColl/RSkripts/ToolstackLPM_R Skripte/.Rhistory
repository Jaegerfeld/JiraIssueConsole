library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "MyPorsche"
source("RScripts/MyPorsche/Import_CSV.R")
startDate <- Sys.Date()-365
test
testInheritedMethods()
# Import metrcs table
library(readxl)
MetricsDT <- read_excel("Export/CSV/Metrics.xlsx")
View(Metrics)
workTable <- MetricsDT
workTable <- workTable[!(is.na(workTable$Effectiveness)),]
View(workTable)
#Korrelationen
# Import metrcs table
library(readxl)
MetricsDT <- read_excel("Export/CSV/Metrics.xlsx")
View(Metrics)
# clean up data
# NA == Zeile nicht berücksichtigen, nur vollständige Daten
workTable <- MetricsDT
workTable <- workTable[!(is.na(workTable$Effectiveness)),]
# remove all except KW 28
workTable <- subset(workTable,workTable$KW == "28" )
Artnames <- workTable$ART
workTable$KW <- NULL
workTable$ART <- NULL
rownames(workTable) <- Artnames
#
## correlations diagram
fit <- prcomp(x = workTable,
center = TRUE,
scale = TRUE)
# plot the results
library(factoextra)
fviz_pca(fit,
repel = TRUE,
labelsize = 3) +
theme_bw() +
labs(title = "Biplot of Arts data")
View(MetricsDT)
#Korrelationen
# Import metrcs table
library(readxl)
MetricsDT <- read_excel("Export/CSV/Metrics.xlsx")
View(Metrics)
# clean up data
# NA == Zeile nicht berücksichtigen, nur vollständige Daten
workTable <- MetricsDT
workTable <- workTable[!(is.na(workTable$Effectiveness)),]
# remove all except KW 28
workTable <- subset(workTable,workTable$KW == "28" )
Artnames <- workTable$ART
workTable$KW <- NULL
workTable$ART <- NULL
rownames(workTable) <- Artnames
#
## correlations diagram
fit <- prcomp(x = workTable,
center = TRUE,
scale = TRUE)
# plot the results
library(factoextra)
fviz_pca(fit,
repel = TRUE,
labelsize = 3) +
theme_bw() +
labs(title = "Biplot of Arts data")
#Korrelationen
# Import metrcs table
library(readxl)
MetricsDT <- read_excel("Export/CSV/Metrics.xlsx")
View(Metrics)
View(MetricsDT)
View(MetricsDT)
workTable <- MetricsDT
workTable <- workTable[!(is.na(workTable$`Work information`)),]
# remove all except KW 28
workTable <- subset(workTable,workTable$KW == "28" )
Artnames <- workTable$ART
workTable$KW <- NULL
workTable$ART <- NULL
rownames(workTable) <- Artnames
#
## correlations diagram
fit <- prcomp(x = workTable,
center = TRUE,
scale = TRUE)
# plot the results
library(factoextra)
fviz_pca(fit,
repel = TRUE,
labelsize = 3) +
theme_bw() +
labs(title = "Biplot of Arts data")
fit <- prcomp(x = workTable,
center = TRUE,
scale = TRUE)
View(workTable)
#Korrelationen
# Import metrcs table
library(readxl)
MetricsDT <- read_excel("Export/CSV/Metrics.xlsx")
View(Metrics)
# clean up data
# NA == Zeile nicht berücksichtigen, nur vollständige Daten
workTable <- MetricsDT
workTable <- workTable[!(is.na(workTable$`Work information`)),]
# remove all except KW 28
workTable <- subset(workTable,workTable$KW == "28" )
Artnames <- workTable$ART
workTable$KW <- NULL
workTable$ART <- NULL
rownames(workTable) <- Artnames
#
## correlations diagram
fit <- prcomp(x = workTable,
center = TRUE,
scale = TRUE)
# plot the results
library(factoextra)
fviz_pca(fit,
repel = TRUE,
labelsize = 3) +
theme_bw() +
labs(title = "Biplot of Arts data")
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "Auswertung"
source("RScripts/Default_Skyway/Import_CSV.R")
View(Features_DT)
# Data Table um unn?tigen Content bereinigen, e.g. ?berschriften, Trenner, Gliederungspunkte
#?berschriften aus Structure entfernen (Status Gruppen etc.), haben NIE Status, issues haben IMMER einen Status
Features_DT <- Features_DT[!(is.na(Features_DT$Status)),]
Features_DT <- Features_DT[!(is.na(Features_DT$`Closed Date`)),]
#Features_DT <- Features_DT[grep("Done", Features_DT$Resolution),]
# remove alles mit Resolution ungleich EMPTY oder Done => Duplicate, abbrecher etc rauswerfen
Features_DT = filter(Features_DT,Features_DT$Resolution != "Duplicate" & Features_DT$Resolution != "Declined" & Features_DT$Resolution != "Won't Do" & Features_DT$Resolution != "Not Required" |is.na(Features_DT$Resolution))
Features_DT <- subset(Features_DT,Features_DT$Issuetype == "Story" | is.na(Features_DT$Issuetype))
View(Features_DT)
View(Features_ALL_DT)
Features_DT <- subset(Features_DT,Features_DT$Issuetype == "Story" | Features_DT$Issuetype == "Story" | is.na(Features_DT$Issuetype))
View(Features_ALL_DT)
View(Features_DT)
Features_DT <- subset(Features_DT,Features_DT$Issuetype == "Story" | Features_DT$Issuetype == "Task" | is.na(Features_DT$Issuetype))
Features_DT <- Features_ALL_DT
Features_DT = filter(Features_DT,Features_DT$Resolution != "Duplicate" & Features_DT$Resolution != "Declined" & Features_DT$Resolution != "Won't Do" & Features_DT$Resolution != "Not Required" |is.na(Features_DT$Resolution))
Features_DT <- subset(Features_DT,Features_DT$Issuetype == "Story" | Features_DT$Issuetype == "Task" | is.na(Features_DT$Issuetype))
#Quickfix um bei Wurzel Issues sich selbst als Parent einzutragen -> ben?tigen wir beim Gruppieren f?r visualisierungen
# Wird ben?tigt, wenn z.B. US in Features mit verarbeitet werden. Annahme: 1 Feature - n US ; 1 US - 1 Feature
Features_DT$Group <- ifelse(is.na(Features_DT$Group), Features_DT$Key, Features_DT$Group)
#Features_DT <- Features_DT[grep("ART-Digital-Finance", Features_DT$Component),]
# Fehlende Daten erg?nzen: Annahme : wir betrachten FERTIGE Feature. d.h. implizit wurden alle wesentlichen Status passiert, wenn auch ?bersprungen
# Completed Date fehlt? DONE Date verwenden
# InProgress Date fehlt? Created verwenden
Features_DT$`First Date` <- ifelse(is.na(Features_DT$`First Date`),
format(Features_DT$`Created Date`, "%Y-%m-%d %H:%M"),
format(Features_DT$`First Date`, "%Y-%m-%d %H:%M"))
#tomorrow <- Sys.Date() +1
#THEAPPFeatures_DT$`Closed Date` <- ifelse(is.na(THEAPPFeatures_DT$`Closed Date`),
#format(tomorrow, "%Y-%m-%d %H:%M:%S "),
#format(THEAPPFeatures_DT$`Closed Date`, "%Y-%m-%d %H:%M:%S "))
# Groupierung wichtig f?r Featuretapete
Features_DT$Group <- ifelse(is.na(Features_DT$Group),
Features_DT$Key, Features_DT$Group)
#print(Features_DT)
calcDT <- Features_DT
calcDT <- Features_DT
#alle vor startdate rauswerfen
calcDT$`Closed Date` <- as.Date((calcDT$`Closed Date`))
calcDT <- calcDT %>% filter( calcDT$`Closed Date`>= startDate)
# wie lange ist die Cyclertime in Minuten, CyleTime = InAnalysis bis Completed,
cyclemins <- round((as.numeric(calcDT$`In Specification`)
+ as.numeric(calcDT$Open)
+ as.numeric(calcDT$`In Progress`)
+ as.numeric(calcDT$`In Review`)
+ as.numeric(calcDT$Pending)), digits = 1);
# umrechnung in Tage CyleTime = InAnalysis bis Completed,
calcDT$CycleDays <- round(as.numeric(cyclemins / 1440), digits = 1);
summaryCycle <- summary(calcDT$CycleDays)
#leadTime = done - InProgress
calcDT$lead <- round(as.numeric(difftime(calcDT$`Closed Date`, calcDT$`First Date`, units = "days")), digits = 0);
summaryLead <- summary(calcDT$lead);
##### spielereien
leadOnMins <- round((as.numeric(calcDT$`In Progress`)
+ as.numeric(calcDT$`In Review`)
+ as.numeric(calcDT$Pending)), digits = 1);
# umrechnung in Tage
calcDT$leadOnMins <- leadOnMins / 1440
summaryLeadOnMins <- summary(calcDT$leadOnMins)
implmins <- round((as.numeric(calcDT$`In Progress`)
), digits = 1)
analysismins <- round((as.numeric(calcDT$`In Specification`)), digits = 1);
backlogmins <- round((as.numeric(calcDT$Open)), digits = 1);
blockedmins <- round((as.numeric(calcDT$Pending)), digits = 1);
calcDT$FunnelDays <- as.numeric(calcDT$New) / 1440
calcDT$DevTime <- implmins / 1440
calcDT$BlockedTimeDays <- blockedmins / 1440
calcDT$AnalysisDays <- analysismins / 1440
calcDT$BacklogDays <- backlogmins / 1440
calcDT$Blocker[calcDT$Blocker == 0] <- NA
implmins <- round((as.numeric(calcDT$`In Progress`)
), digits = 1)
analysismins <- round((as.numeric(calcDT$`In Specification`)), digits = 1);
backlogmins <- round((as.numeric(calcDT$Open)), digits = 1);
blockedmins <- round((as.numeric(calcDT$Pending)), digits = 1);
calcDT$FunnelDays <- as.numeric(calcDT$New) / 1440
calcDT$DevTime <- implmins / 1440
calcDT$BlockedTimeDays <- blockedmins / 1440
calcDT$AnalysisDays <- analysismins / 1440
calcDT$BacklogDays <- backlogmins / 1440
calcDT$Blocker[calcDT$Pending == 0] <- NA
implmins <- round((as.numeric(calcDT$`In Progress`)
), digits = 1)
analysismins <- round((as.numeric(calcDT$`In Specification`)), digits = 1);
backlogmins <- round((as.numeric(calcDT$Open)), digits = 1);
blockedmins <- round((as.numeric(calcDT$Pending)), digits = 1);
calcDT$FunnelDays <- as.numeric(calcDT$New) / 1440
calcDT$DevTime <- implmins / 1440
calcDT$BlockedTimeDays <- blockedmins / 1440
calcDT$AnalysisDays <- analysismins / 1440
calcDT$BacklogDays <- backlogmins / 1440
calcDT$Pending[calcDT$Pending == 0] <- NA
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/Default_Skyway/Export.R")
source("RScripts/Default_Skyway/scattertable.R")
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/Default_Skyway/Export.R")
calcDTAging <- Features_ALL_DT
calcDTAging <- Features_ALL_DT
##cleanup
# remove no Status Lines (== not an issue) , remove already closed Issues (== has a closed date, regarding to Workflow definition in issuecoll)
calcDTAging <- calcDTAging[!(is.na(calcDTAging$Status)),]
calcDTAging <- calcDTAging[(is.na(calcDTAging$`Closed Date`)),]
cycleAgingmins <- round((as.numeric(calcDTAging$`In Specification`)
+ as.numeric(calcDTAging$Open)
+ as.numeric(calcDTAging$`In Progress`)
+ as.numeric(calcDTAging$Pending)), digits = 1);
calcDTAging$CycleDays <- round(as.numeric(cycleAgingmins / 1440), digits = 1);
Funnel_Aging_DT <- subset(calcDTAging, calcDTAging$Status == "Open")
NotReady_Aging_DT <- subset(calcDTAging, calcDTAging$Status != "Open")
CountDoneIssues <- nrow(calcDT)
#"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
#" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
captionTitle =  paste("CycleTime",
"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
"| # Done Items: ", nrow(calcDT))
summaryNotReady <- summary(NotReady_Aging_DT$CycleDays)
Reporttitle <- paste("Age & Current Status:
Mean" , round(as.numeric(summaryNotReady[4]), digits = 2),
" | Median: ", round(as.numeric(summaryNotReady[3]), digits = 2),
"| # Not done Items: ", nrow(NotReady_Aging_DT))
AgingWIPPlot <- ggplot(NotReady_Aging_DT, aes(Status, CycleDays)) +
geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
binwidth = 15,
fill="red") +
geom_hline(yintercept=(summaryCycle[3]), linetype="dashed", color = "red") +
theme(legend.position = "none")  +
scale_x_discrete(limits = c("Blocker", "In Analysis","Backlog","In Implementation")) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Aging Work in Progress",
subtitle=Reporttitle,
caption=captionTitle,
x="Current Status",
y="Total Age")
plot(AgingWIPPlot)
source("RScripts/Default_Skyway/Export.R")
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "Auswertung"
source("RScripts/Default_Skyway/Import_CSV.R")
source("RScripts/fg/cleanup.R")
source("RScripts/fg/Feature_Calculations.R")
source("RScripts/fg/Detail_Calculations.R")
source("RScripts/Default_Skyway/scattertable.R")
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/fg/AgingWorkCalculations")
calcDTAging <- Features_ALL_DT
##cleanup
# remove no Status Lines (== not an issue) , remove already closed Issues (== has a closed date, regarding to Workflow definition in issuecoll)
calcDTAging <- calcDTAging[!(is.na(calcDTAging$Status)),]
calcDTAging <- calcDTAging[(is.na(calcDTAging$`Closed Date`)),]
cycleAgingmins <- round((as.numeric(calcDTAging$`In Specification`)
+ as.numeric(calcDTAging$Open)
+ as.numeric(calcDTAging$`In Progress`)
+ as.numeric(calcDTAging$Pending)), digits = 1);
calcDTAging$CycleDays <- round(as.numeric(cycleAgingmins / 1440), digits = 1);
Funnel_Aging_DT <- subset(calcDTAging, calcDTAging$Status == "Open")
NotReady_Aging_DT <- subset(calcDTAging, calcDTAging$Status != "Open")
CountDoneIssues <- nrow(calcDT)
#"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
#" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
captionTitle =  paste("CycleTime",
"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
"| # Done Items: ", nrow(calcDT))
summaryNotReady <- summary(NotReady_Aging_DT$CycleDays)
Reporttitle <- paste("Age & Current Status:
Mean" , round(as.numeric(summaryNotReady[4]), digits = 2),
" | Median: ", round(as.numeric(summaryNotReady[3]), digits = 2),
"| # Not done Items: ", nrow(NotReady_Aging_DT))
AgingWIPPlot <- ggplot(NotReady_Aging_DT, aes(Status, CycleDays)) +
geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
binwidth = 15,
fill="red") +
geom_hline(yintercept=(summaryCycle[3]), linetype="dashed", color = "red") +
theme(legend.position = "none")  +
scale_x_discrete(limits = c("Blocker", "In Analysis","Backlog","In Implementation")) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Aging Work in Progress",
subtitle=Reporttitle,
caption=captionTitle,
x="Current Status",
y="Total Age")
plot(AgingWIPPlot)
source("RScripts/Default_Skyway/Export.R")
View(calcDT)
calcDTAging <- Features_ALL_DT
##cleanup
# remove no Status Lines (== not an issue) , remove already closed Issues (== has a closed date, regarding to Workflow definition in issuecoll)
calcDTAging <- calcDTAging[!(is.na(calcDTAging$Status)),]
calcDTAging <- calcDTAging[(is.na(calcDTAging$`Closed Date`)),]
cycleAgingmins <- round((as.numeric(calcDTAging$`In Specification`)
+ as.numeric(calcDTAging$Open)
+ as.numeric(calcDTAging$`In Progress`)
+ as.numeric(calcDTAging$`In Review`)
+ as.numeric(calcDTAging$Pending)), digits = 1);
calcDTAging$CycleDays <- round(as.numeric(cycleAgingmins / 1440), digits = 1);
Funnel_Aging_DT <- subset(calcDTAging, calcDTAging$Status == "Open")
NotReady_Aging_DT <- subset(calcDTAging, calcDTAging$Status != "Open")
CountDoneIssues <- nrow(calcDT)
#"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
#" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
captionTitle =  paste("CycleTime",
"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
"| # Done Items: ", nrow(calcDT))
summaryNotReady <- summary(NotReady_Aging_DT$CycleDays)
Reporttitle <- paste("Age & Current Status:
Mean" , round(as.numeric(summaryNotReady[4]), digits = 2),
" | Median: ", round(as.numeric(summaryNotReady[3]), digits = 2),
"| # Not done Items: ", nrow(NotReady_Aging_DT))
AgingWIPPlot <- ggplot(NotReady_Aging_DT, aes(Status, CycleDays)) +
geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
binwidth = 15,
fill="red") +
geom_hline(yintercept=(summaryCycle[3]), linetype="dashed", color = "red") +
theme(legend.position = "none")  +
scale_x_discrete(limits = c("Pending", "In Specification","Open","In Progress", "In Review")) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Aging Work in Progress",
subtitle=Reporttitle,
caption=captionTitle,
x="Current Status",
y="Total Age")
plot(AgingWIPPlot)
source("RScripts/Default_Skyway/Export.R")
calcDTAging <- Features_ALL_DT
##cleanup
# remove no Status Lines (== not an issue) , remove already closed Issues (== has a closed date, regarding to Workflow definition in issuecoll)
calcDTAging <- calcDTAging[!(is.na(calcDTAging$Status)),]
calcDTAging <- calcDTAging[(is.na(calcDTAging$`Closed Date`)),]
cycleAgingmins <- round((as.numeric(calcDTAging$`In Specification`)
+ as.numeric(calcDTAging$Open)
+ as.numeric(calcDTAging$`In Progress`)
+ as.numeric(calcDTAging$`In Review`)
+ as.numeric(calcDTAging$Pending)), digits = 1);
calcDTAging$CycleDays <- round(as.numeric(cycleAgingmins / 1440), digits = 1);
Funnel_Aging_DT <- subset(calcDTAging, calcDTAging$Status == "New")
NotReady_Aging_DT <- subset(calcDTAging, calcDTAging$Status != "New")
CountDoneIssues <- nrow(calcDT)
#"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
#" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
captionTitle =  paste("CycleTime",
"| Mean: ", round(as.numeric(summaryCycle[4]), digits = 2),
" | Median: ", round(as.numeric(summaryCycle[3]), digits = 2),
"| # Done Items: ", nrow(calcDT))
summaryNotReady <- summary(NotReady_Aging_DT$CycleDays)
Reporttitle <- paste("Age & Current Status:
Mean" , round(as.numeric(summaryNotReady[4]), digits = 2),
" | Median: ", round(as.numeric(summaryNotReady[3]), digits = 2),
"| # Not done Items: ", nrow(NotReady_Aging_DT))
AgingWIPPlot <- ggplot(NotReady_Aging_DT, aes(Status, CycleDays)) +
geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
binwidth = 15,
fill="red") +
geom_hline(yintercept=(summaryCycle[3]), linetype="dashed", color = "red") +
theme(legend.position = "none")  +
scale_x_discrete(limits = c("Pending", "In Specification","Open","In Progress", "In Review")) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Aging Work in Progress",
subtitle=Reporttitle,
caption=captionTitle,
x="Current Status",
y="Total Age")
plot(AgingWIPPlot)
source("RScripts/Default_Skyway/Export.R")
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "Auswertung"
source("RScripts/Default_Skyway/Import_CSV.R")
source("RScripts/fg/cleanup.R")
source("RScripts/fg/Feature_Calculations.R")
source("RScripts/fg/Detail_Calculations.R")
source("RScripts/Default_Skyway/scattertable.R")
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/fg/AgingWorkCalculations")
source("RScripts/Default_Skyway/Export.R")
source("RScripts/fg/AgingWorkCalculations.R")
source("RScripts/Default_Skyway/Export.R")
source("RScripts/fg/AgingWorkCalculations.R")
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "Auswertung"
source("RScripts/Default_Skyway/Import_CSV.R")
source("RScripts/fg/cleanup.R")
source("RScripts/fg/Feature_Calculations.R")
source("RScripts/fg/Detail_Calculations.R")
source("RScripts/Default_Skyway/scattertable.R")
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/fg/AgingWorkCalculations.R")
source("RScripts/Default_Skyway/Export.R")
library(readr)
library(timevis)
library(dplyr)
library(ggplot2)
library(ggrepel)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
startDate <- Sys.Date()-365
} else if (length(args)==1) {
startDate <- Sys.Date() - args[1]
}
teamname = "Auswertung"
source("RScripts/Default_Skyway/Import_CSV.R")
source("RScripts/fg/cleanup.R")
source("RScripts/fg/Feature_Calculations.R")
source("RScripts/fg/Detail_Calculations.R")
source("RScripts/Default_Skyway/scattertable.R")
source("RScripts/Default_Skyway/Plottings.R")
source("RScripts/fg/AgingWorkCalculations.R")
source("RScripts/Default_Skyway/Export.R")
source("C:/Users/rober/OneDrive/Arbeit/ToolstackLPM/RScripts/DPO_ARTS_Summary/Korrelationen.R", encoding = 'UTF-8', echo=TRUE)
